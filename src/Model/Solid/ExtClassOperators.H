AMREX_FORCE_INLINE
OP_CLASS operator * (const Set::Scalar alpha, const OP_CLASS b)
{
    OP_CLASS ret;
    #define X(name) \
        ret.name = b.name*alpha;
        OP_VARS
    #undef X

    #ifdef OP_LOOP_VARS
    for (int i = 0; i < OP_LOOP_NUM; i++)
    {
        #define X(name)\
        ret.name[i] = b.name[i]*alpha;
        OP_LOOP_VARS
        #undef X
    }
    #endif

    return ret;
}

// AMREX_FORCE_INLINE
// OP_CLASS operator / (const Set::Scalar alpha, const OP_CLASS b)
// {
//     OP_CLASS ret;
//     #define X(name) \
//         ret.name = b.name/alpha;
//         OP_VARS
//     #undef X

//     #ifdef OP_LOOP_VARS
//     for (int i = 0; i < OP_LOOP_NUM; i++)
//     {
//         #define X(name)\
//         ret.name[i] = b.name[i]/alpha;
//         OP_LOOP_VARS
//         #undef X
//     }
//     #endif

//     return ret;
// }

AMREX_FORCE_INLINE
OP_CLASS operator + (const OP_CLASS a, const OP_CLASS b)
{
    OP_CLASS ret;
    #define X(name) ret.name = a.name + b.name;
        OP_VARS
    #undef X

    #ifdef OP_LOOP_VARS
    for (int i = 0; i < OP_LOOP_NUM; i++)
    {
        #define X(name) ret.name[i] = a.name[i] + b.name[i];
        OP_LOOP_VARS
        #undef X
    }
    #endif
    
    return ret;
}    

AMREX_FORCE_INLINE
OP_CLASS operator - (const OP_CLASS a, const OP_CLASS b)
{
    OP_CLASS ret;
    #define X(name)  ret.name = a.name - b.name;
        OP_VARS
    #undef X

    #ifdef OP_LOOP_VARS
    for (int i = 0; i < OP_LOOP_NUM; i++)
    {
        #define X(name) ret.name[i] = a.name[i] - b.name[i];
        OP_LOOP_VARS
        #undef X
    }
    #endif

    return ret;
}    

#undef OP_VARS
#undef OP_CLASS
#undef OP_LOOP_VARS
#undef OP_LOOP_NUM
